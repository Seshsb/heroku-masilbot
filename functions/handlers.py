from pprint import pprint

import requests

import config
import dbworker
from connections import YANDEX_TOKEN, bot

from data.config import *
from keyboards import general_nav
from keyboards.delivery.default.navigations import *
from keyboards.delivery.inline.navigations import accepting_order


def get_address_from_coords(coords):
    #–∑–∞–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø–∏—Å—ã–≤–∞–ª–∏—Å—å –≤—ã–∂–µ. –í–ø–∏—à–∏ –≤ –ø–æ–ª–µ apikey —Å–≤–æ–π —Ç–æ–∫–µ–Ω!
    PARAMS = {
        "apikey": YANDEX_TOKEN,
        "format": "json",
        "lang": "ru_RU",
        "kind": "house",
        "geocode": coords
    }

    #–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ –∞–¥—Ä–µ—Å—É –≥–µ–æ–∫–æ–¥–µ—Ä–∞.
    try:
        r = requests.get(url="https://geocode-maps.yandex.ru/1.x/", params=PARAMS)
        pprint(r)
        #–ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        json_data = r.json()
        #–≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∏–∑ –≤—Å–µ–≥–æ –ø—Ä–∏—à–µ–¥—à–µ–≥–æ json –∏–º–µ–Ω–Ω–æ —Å—Ç—Ä–æ–∫—É —Å –ø–æ–ª–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º.
        address_str = json_data["response"]["GeoObjectCollection"]["featureMember"][0]["GeoObject"]["metaDataProperty"]["GeocoderMetaData"]["AddressDetails"]["Country"]["AddressLine"]
        #–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
        return address_str
    except Exception as e:
        #–µ—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
        return "error"


def show_basket(message: types.Message):

    '''–í—ã–≤–æ–¥ –∫–æ—Ä–∑–∏–Ω—ã'''

    goods = deliveryDB.show_basket(message.from_user.id)
    cart = f'<b>–ö–æ—Ä–∑–∏–Ω–∞:</b>\n\n\n'
    total = 0
    if goods:
        for good in goods:
            total += int(good[-1])
            cart += '<b>{0}</b>\n{1} x {2:,} = {3:,}\n\n'.format(good[0], good[2], good[1], good[-1]).replace(',', ' ')
        cart += '\n<b>–ò—Ç–æ–≥–æ: {0:,} —Å—É–º</b>'.format(total).replace(',', ' ')
        bot.send_message(message.from_user.id, cart, reply_markup=order(message.from_user.id), parse_mode='html')
        dbworker.set_states(message.from_user.id, config.States.S_DELIVERY_CART.value)
    else:
        bot.send_message(message.from_user.id, '<b>\n–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.\n</b>', parse_mode='html')
        bot.send_message(message.from_user.id, DELIVERY_REQUEST_CATEGORY,
                         reply_markup=food_categoriesRu())
        dbworker.set_states(message.from_user.id, config.States.S_DELIVERY_MENU_CATEGORY.value)


def accept_admin(client, phone_number, method_pay, address, takeaway):
    goods = deliveryDB.get_order(client)
    order_admin = f'<b>–ó–∞–∫–∞–∑ #{deliveryDB.order_id(client)}</b>\n' \
            f'–¢–∏–ø –∑–∞–∫–∞–∑–∞: {takeaway if takeaway else "–î–æ—Å—Ç–∞–≤–∫–∞ üöò"}\n' \
            f'–ê–¥—Ä–µ—Å: {takeaway if takeaway else address}\n' \
            f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}\n' \
            f'–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: {method_pay}\n\n\n'
    total = 0
    for good in goods:
        total += int(good[-1])
        order_admin += '<b>{0}</b>\n{1} x {2:,} = {3:,}\n\n'.format(good[0], good[2], good[1], good[-1]).replace(',', ' ')
    order_admin += '\n<b>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {0:,} —Å—É–º</b>'.format(total).replace(',', ' ')
    bot.send_message(client,
                     f'–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–∂–∏–¥–∞–Ω–∏–µ, –≤–∞—à –∑–∞–∫–∞–∑ <b>#{deliveryDB.order_id(client)}</b> '
                     f'–ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É. –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä.',
                     parse_mode='html', reply_markup=types.ReplyKeyboardRemove())
    bot.send_message(275755142, order_admin, parse_mode='html')
    if takeaway:
        bot.send_message(275755142, '<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑?</b>', parse_mode='html', reply_markup=accepting_order())
        return dbworker.set_states(275755142, config.States.S_DELIVERY_ADMIN_ACCEPT.value)
    bot.send_message(275755142, "<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Å—Ç–∞–≤–∫–∏</b>", parse_mode='html')
    return dbworker.set_states(275755142, config.States.S_DELIVERY_AMOUNT.value)


def accept_client(client, phone_number, method_pay, address, takeaway):
    goods = deliveryDB.get_order(client)
    order_client = f'<b>–í–∞—à –∑–∞–∫–∞–∑</b>\n' \
                   f'–¢–∏–ø –∑–∞–∫–∞–∑–∞: <b>{takeaway if takeaway else "–î–æ—Å—Ç–∞–≤–∫–∞ üöò"}</b>\n' \
                   f'–ê–¥—Ä–µ—Å: <b>{takeaway if takeaway else address}</b>\n' \
                   f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <b>{phone_number}</b>\n' \
                   f'–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: <b>{method_pay}</b>\n\n\n'
    if takeaway:
        order_client = f'<b>–í–∞—à –∑–∞–∫–∞–∑</b>\n' \
                       f'–¢–∏–ø –∑–∞–∫–∞–∑–∞: <b>{takeaway}</b>\n' \
                       f'–ê–¥—Ä–µ—Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞: <b>–ú–∏—Ä–∞–±–∞–¥, 41</b>\n' \
                       f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <b>{phone_number}</b>\n' \
                       f'–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: <b>{method_pay}</b>\n\n\n'
    total = 0
    for good in goods:
        total += int(good[-1])
        order_client += '<b>{0}</b>\n{1} x {2:,} = {3:,}\n\n'.format(good[0], good[2], good[1], good[-1]).replace(',', ' ')
    order_client += '\n<b>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {0:,} —Å—É–º + —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∏—Å—Ö–æ–¥—è –æ—Ç–∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏)</b>\n\n' \
                   '–î–ª—è —Å–≤—è–∑–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º @seshsb'.format(total,).replace(',', ' ')
    bot.send_message(client, order_client, parse_mode='html', reply_markup=accepting_order())
    deliveryDB.checkout(client, address, phone_number)
    dbworker.set_states(client, config.States.S_DELIVERY_CLIENT_ACCEPT.value)


def show_order(client, phone_number, method_pay, address, takeaway, amount):
    goods = deliveryDB.get_order(client)
    order_client = f'<b>–ó–∞–∫–∞–∑ #{deliveryDB.order_id(client)}</b>\n' \
            f'–¢–∏–ø –∑–∞–∫–∞–∑–∞: <b> "–î–æ—Å—Ç–∞–≤–∫–∞ üöò"</b>\n' \
            f'–ê–¥—Ä–µ—Å: <b>{takeaway if takeaway else address}</b>\n' \
            f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <b>{phone_number}</b>\n' \
            f'–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: <b>{method_pay}</b>\n' \
            f'–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: <b>–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è</b>\n\n\n'
    if takeaway:
        order_client = f'<b>–í–∞—à –∑–∞–∫–∞–∑</b>\n' \
                       f'–¢–∏–ø –∑–∞–∫–∞–∑–∞: <b>{takeaway}</b>\n' \
                       f'–ê–¥—Ä–µ—Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞: <b>–ú–∏—Ä–∞–±–∞–¥, 41</b>\n' \
                       f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <b>{phone_number}</b>\n' \
                       f'–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: <b>{method_pay}</b>\n\n\n'
    total = 0
    for good in goods:
        total += int(good[-1])
        order_client += '<b>{0}</b>\n{1} x {2:,} = {3:,}\n\n'.format(good[0], good[2], good[1], good[-1]).replace(',', ' ')
    order_client += '\n<b>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {0:,} —Å—É–º\n' \
                   '–°—É–º–º–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {1:,}\n' \
                   '–ò—Ç–æ–≥–æ: {2:,}</b>\n\n'.format(total, amount, total+amount).replace(',', ' ')
    bot.send_message(client, order_client, parse_mode='html')
    deliveryDB.accept_order(client)
    bot.send_message(client, '–•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –µ—â–µ?', reply_markup=general_nav.booking_or_delivery())
    bot.send_message(client, '–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∑–∞–∫–∞–∑,', reply_markup=general_nav.booking_or_delivery())
    dbworker.set_states(client, config.States.S_ACTION_CHOICE.value)
